<!DOCTYPE html>
<html>
<head>
    <title>Validator Graph</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        canvas {
            max-width: 100%;
            height: auto;
        }
        .legend-table {
            margin-top: 20px;
            border-collapse: collapse;
            width: 100%;
        }
        .legend-table th, .legend-table td {
            text-align: center;
            padding: 8px;
            border: 1px solid #ddd;
        }
        .legend-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .legend-table td.avg-fee-rewards,
        .legend-table td.validator-blocks,
        .legend-table td.total-blocks {
            text-align: right;
        }
    </style>
</head>
<body>
    <div>
        <label for="pubkey-select">Select Pubkey/Name:</label>
        <input type="text" id="pubkey-select" list="pubkey-options">
        <datalist id="pubkey-options"></datalist>
    </div>
    <canvas id="validator-chart"></canvas>
    <table class="legend-table">
        <thead>
            <tr>
                <th>Epoch</th>
                <th>Icon</th>
                <th>Name</th>
                <th>Website</th>
                <th>Pubkey</th>
                <th>Vote Account Pubkey</th>
                <th>Average Rewards (SOL)</th>
                <th>Validator Blocks</th>
                <th>Total Blocks in Epoch</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script>
        $(document).ready(function() {
            var currentPubkey = '';
            var currentName = '';

            // Fetch pubkeys and names from the Flask backend
            $.getJSON('/api/pubkeys', function(data) {
                var pubkeyOptions = $('#pubkey-options');
                data.forEach(function(item) {
                    var option = $('<option>').attr('value', item.pubkey).text(item.name || item.pubkey);
                    pubkeyOptions.append(option);
                });
            });

            var chart; // Declare chart variable outside the fetchData function

            // Fetch data from the Flask backend
            function fetchData(pubkey) {
                console.log('Debug: Fetching data for pubkey:', pubkey);
                $.getJSON('/api/validator_data', { pubkey: pubkey }, function(data) {
                    console.log('Debug: Received data:', data);

                    var labels = data.map(function(item) {
                        return 'Epoch ' + item.epoch;
                    });
                    var avgFeeRewards = data.map(function(item) {
                        return item.avg_fee_rewards / 1e9; // Convert lamports to SOL
                    });

                    updateChart(labels, avgFeeRewards, pubkey, currentName, currentPubkey);

                    // Update the legend table
                    var legendTable = $('.legend-table tbody');
                    legendTable.empty();
                    data.forEach(function(item) {
                        var row = $('<tr>');
                        row.append($('<td>').text('Epoch ' + item.epoch));
                        row.append($('<td>').html(item.icon_url ? '<img src="' + item.icon_url + '" alt="Icon" width="32" height="32">' : ''));
                        row.append($('<td>').text(item.name));
                        row.append($('<td>').html(item.website ? '<a href="' + item.website + '">Website</a>' : ''));
                        row.append($('<td>').text(item.pubkey));
                        row.append($('<td>').text(item.vote_account_pubkey));
                        row.append($('<td>').text((item.avg_fee_rewards / 1e9).toFixed(5)).addClass('avg-fee-rewards'));
                        row.append($('<td>').text(item.validator_block_count).addClass('validator-blocks'));
                        row.append($('<td>').text(item.epoch_block_count).addClass('total-blocks'));
                        legendTable.append(row);
                    });
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    console.log('Debug: Error fetching data:', textStatus, errorThrown);
                });
            }

            function updateChart(labels, avgFeeRewards, pubkey, currentName, currentPubkey) {
                if (chart) {
                    chart.destroy(); // Destroy the previous chart instance
                }

                var ctx = document.getElementById('validator-chart').getContext('2d');
                chart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Average Fee Rewards (SOL)',
                            data: avgFeeRewards,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.8)',
                                'rgba(54, 162, 235, 0.8)',
                                'rgba(255, 206, 86, 0.8)',
                                'rgba(75, 192, 192, 0.8)',
                                'rgba(153, 102, 255, 0.8)'
                            ],
                            borderColor: 'rgba(0, 0, 0, 1)',
                            borderWidth: 1,
                            datalabels: {
                                align: 'end',
                                anchor: 'end',
                                offset: 4,
                                color: 'black',
                                font: {
                                    weight: 'bold'
                                },
                                formatter: function(value, context) {
                                    if (context.dataIndex === 0) {
                                        return '';
                                    }
                                    return value.toFixed(5);
                                }
                            }
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                ticks: {
                                    callback: function(value, index, values) {
                                        var label = this.getLabelForValue(value);
                                        if (label.length > 20) {
                                            return label.substr(0, 20) + '...';
                                        }
                                        return label;
                                    }
                                }
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: `Historical Average Rewards for Validator ${currentName} (${currentPubkey})`,
                                font: {
                                    size: 18,
                                    weight: 'bold'
                                }
                            }
                        }
                    }
                });
            }

            // Check if a pubkey is provided in the URL
            var urlParams = new URLSearchParams(window.location.search);
            var urlPubkey = urlParams.get('pubkey');

            if (urlPubkey) {
                console.log('Debug: Pubkey provided in URL:', urlPubkey);
                currentPubkey = urlPubkey;
                fetchData(currentPubkey);
            }

            // Handle pubkey/name selection
            $('#pubkey-select').on('change', function() {
                currentPubkey = $('#pubkey-select').val();
                console.log('Debug: Selected pubkey:', currentPubkey);
                fetchData(currentPubkey);

                // Update currentName based on the selected pubkey
                var selectedOption = $('#pubkey-options option[value="' + currentPubkey + '"]');
                currentName = selectedOption.text();
            });
        });
    </script>
</body>
</html>